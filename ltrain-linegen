#!/usr/bin/python

import sys
sys.path.append('/Users/kevin/ocropy/clstm/build/lib.macosx-10.10-x86_64-2.7')

import random as pyrandom
import glob,sys,os,re,codecs,traceback
from pylab import *
from PIL import Image
from PIL import ImageFont, ImageDraw
from scipy.ndimage import filters,measurements,interpolation
from scipy.misc import imsave
import ocrolib


import random as pyrandom
import re
from pylab import *
import os.path
import ocrolib
from ocrolib.common import *
import argparse
import matplotlib
import numpy
from ocrolib import lineest
import ocrolib.lstm as lstm
import traceback
import clstm
ion()
matplotlib.rc('xtick',labelsize=7)
matplotlib.rc('ytick',labelsize=7)
matplotlib.rcParams.update({"font.size":9})


numpy.seterr(divide='raise',over='raise',invalid='raise',under='ignore')

parser = argparse.ArgumentParser("train an RNN recognizer")

# character set
parser.add_argument("-c","--codec",default=[],nargs='*',
                    help="construct a codec from the input text")

parser.add_argument("--lineheight",type=int,default=48,
                    help="# LSTM state units")
parser.add_argument("-p","--pad",type=int,default=16)

# learning
parser.add_argument("-r","--lrate",type=float,default=1e-4,
                    help="LSTM learning rate")
parser.add_argument("-S","--hiddensize",type=int,default=100,
                    help="# LSTM state units")
parser.add_argument("-o","--output",default="temp",
                    help="LSTM model file")
parser.add_argument("-F","--savefreq",type=int,default=1000,
                    help="LSTM save frequency")

parser.add_argument('-dr','--distort',type=float,default=1.0)
parser.add_argument('-R','--dsigma',type=float,default=20.0)
parser.add_argument('-f','--fonts',default=None)
parser.add_argument('--fontlist',default=None)
parser.add_argument('-t','--texts',default=None)
parser.add_argument('-T','--textlist',default=None)
parser.add_argument('-m','--maxlines',default=400,type=int,
    help='max # lines for each directory')
parser.add_argument('-e','--degradations',default="med",
    help="lo, med, or hi; or give a file")
parser.add_argument('-j','--jitter',default=0.5)
parser.add_argument('-s','--sizes',default="40-80")
parser.add_argument('-C','--cleanup',default='[_~#]')
parser.add_argument('-d','--display',action="store_true")
parser.add_argument('--load',default=None,
                    help="start training with a previously trained model")

parser.add_argument("--start",type=int,default=0,
                    help="# start training line")
parser.add_argument("--ntrain",type=int,default=1000000,
                    help="# lines to train before stopping")

# parser.add_argument("files",nargs="*")
args = parser.parse_args()

# inputs = ocrolib.glob_all(args.files)
import os


if "-" in args.sizes:
    lo,hi = args.sizes.split("-")
    sizes = range(int(lo),int(hi)+1)
else:
    sizes = [int(x) for x in args.sizes.split(",")]


if args.degradations=="lo":
    # sigma +/-   threshold +/-
    deglist = """
    0.5 0.0   0.5 0.0
    """
elif args.degradations=="med":
    deglist = """
    0.5 0.0   0.5 0.05
    1.0 0.3   0.4 0.05
    1.0 0.3   0.5 0.05
    1.0 0.3   0.6 0.05
    """
elif args.degradations=="hi":
    deglist = """
    0.5 0.0   0.5 0.0
    1.0 0.3   0.4 0.1
    1.0 0.3   0.5 0.1
    1.0 0.3   0.6 0.1
    1.3 0.3   0.4 0.1
    1.3 0.3   0.5 0.1
    1.3 0.3   0.6 0.1
    """
elif args.degradations is not None:
    with open(args.degradations) as stream:
        deglist = stream.read()

degradations = []
for deg in deglist.split("\n"):
    deg = deg.strip()
    if deg=="": continue
    deg = [float(x) for x in deg.split()]
    degradations.append(deg)



if args.texts is not None:
    texts = []
    for pat in args.texts.split(':'):
        print pat
        if pat=="": continue
        texts += sorted(glob.glob(pat))
elif args.textlist is not None:
    texts = re.split(r'\s*\n\s*',open(args.textlist).read())
else:
    print "use -t or -T arguments to specify texts"
    sys.exit(1)
assert len(texts)>0,"no texts?"

lines = []
for text in texts:
    print "# reading",text
    with codecs.open(text,'r','utf-8') as stream:
        for line in stream.readlines():
            line = line.strip()
            line = re.sub(args.cleanup,'',line)
            if len(line)<1: continue
            lines.append(line)
print "got",len(lines),"lines"
assert len(lines)>0
lines = list(set(lines))
print "got",len(lines),"unique lines"

def rgeometry(image,eps=0.03,delta=0.3):
    m = array([[1+eps*randn(),0.0],[eps*randn(),1.0+eps*randn()]])
    w,h = image.shape
    c = array([w/2.0,h/2])
    d = c-dot(m,c)+array([randn()*delta,randn()*delta])
    return interpolation.affine_transform(image,m,offset=d,order=1,mode='constant',cval=image[0,0])

from scipy.ndimage import interpolation,filters

def rdistort(image,distort=3.0,dsigma=10.0,cval=0):
    h,w = image.shape
    hs = randn(h,w)
    ws = randn(h,w)
    hs = filters.gaussian_filter(hs,dsigma)
    ws = filters.gaussian_filter(ws,dsigma)
    hs *= distort/amax(hs)
    ws *= distort/amax(ws)
    def f(p):
        return (p[0]+hs[p[0],p[1]],p[1]+ws[p[0],p[1]])
    return interpolation.geometric_transform(image,f,output_shape=(h,w),
        order=1,mode='constant',cval=cval)

# if args.debug_show:
#     ion(); gray()

def bounding_box(a):
    a = array(a>0,'i')
    l = measurements.find_objects(a)
    if len(l)<1: return (0,0,0,0)
    ys,xs = l[0]
    # y0,x0,y1,x1
    return (ys.start,xs.start,ys.stop,xs.stop)

# base = args.base
# print "base",base
# os.system("rm -rf "+base)
# os.mkdir(base)

def crop(image,pad=1):
    [[r,c]] = measurements.find_objects(array(image==0,'i'))
    r0 = r.start
    r1 = r.stop
    c0 = c.start
    c1 = c.stop
    image = image[r0-pad:r1+pad,c0-pad:c1+pad]
    return image

last_font = None
last_size = None
last_fontfile = None

def genline(text,fontfile=None,size=36,sigma=0.5,threshold=0.5):
    global image,draw,last_font,last_fontfile
    if last_fontfile!=fontfile or last_size!=size:
        last_font = ImageFont.truetype(fontfile,size)
        last_fontfile = fontfile
    font = last_font
    image = Image.new("L",(6000,200))
    draw = ImageDraw.Draw(image)
    draw.rectangle((0,0,6000,6000),fill="white")
    #print "\t",size,font
    draw.text((20,20),text,fill="black",font=font)
    a = asarray(image,'f')
    a = a*1.0/amax(a)
    if sigma>0.0:
        a = filters.gaussian_filter(a,sigma)
    a += clip(randn(*a.shape)*0.2,-0.25,0.25)
    a = rgeometry(a)
    a = array(a>threshold,'f')
    a = crop(a,pad=3)
    # FIXME add grid warping here
    # clf(); ion(); gray(); imshow(a); ginput(1,0.1)
    del draw
    del image
    return a



if "%" not in args.output:
    args.output = args.output + "-%08d-lstm.h5"

# charset = sorted(list(set(list(lstm.ascii_labels) + list(ocrolib.chars.default))))
# charset = [""," ","~",]+[c for c in charset if c not in [" ","~"]]
# codec = lstm.Codec().init(charset)
codec = lstm.ascii_codec()
lnorm = lineest.CenterNormalizer(args.lineheight)

network = clstm.make_BIDILSTM()
print "# network",(codec.size(),args.hiddensize,lnorm.target_height)
network.init(codec.size(),args.hiddensize,lnorm.target_height)
network = clstm.CNetwork(network)
if args.load: network.load(args.load)

network.setLearningRate(args.lrate,0.9)

def cleandisp(s):
    return re.sub('[$]',r'#',s)

def preprocess(line):
    lnorm.measure(amax(line)-line)
    line = lnorm.normalize(line,cval=amax(line))
    if line.size<10 or amax(line)==amin(line):
        return None
    line = line * 1.0/amax(line)
    line = amax(line)-line
    line = line.T
    if args.pad>0:
        w = line.shape[1]
        line = vstack([zeros((args.pad,w)),line,zeros((args.pad,w))])
    return line


def plot_network_info(network,outputs,aligned,errors,transcript,pred,gta):
    subplot(511)
    imshow(line.T,cmap=cm.gray)
    title(cleandisp(transcript))
    subplot(512)
    gca().set_xticks([])
    imshow(outputs.T[1:],vmin=0,cmap=cm.hot)
    title(cleandisp(pred[:len(transcript)]))
    subplot(513)
    imshow(aligned.T[1:],vmin=0,cmap=cm.hot)
    title(cleandisp(gta[:len(transcript)]))
    subplot(514)
    plot(outputs[:,0],color='yellow',linewidth=3,alpha=0.5)
    plot(outputs[:,1],color='green',linewidth=3,alpha=0.5)
    plot(amax(outputs[:,2:],axis=1),color='blue',linewidth=3,alpha=0.5)
    plot(aligned[:,0],color='orange',linestyle='dashed',alpha=0.7)
    plot(aligned[:,1],color='green',linestyle='dashed',alpha=0.5)
    plot(amax(aligned[:,2:],axis=1),color='blue',linestyle='dashed',alpha=0.5)
    subplot(515)
    gca().set_yscale('log')
    r = 10000
    errs = get_errors(range=r,smooth=100)
    xs = arange(len(errs))+network.last_trial-len(errs)
    plot(xs,errs,color='black')
    plot(xs,get_errors(range=r),color='black',alpha=0.4)
    plot(xs,get_cerrors(range=r,smooth=100),color='red',linestyle='dashed')

def get_cerrors(range=10000,smooth=0):
    result = [e*1.0/max(1,n) for e,n in cerror_log[-range:]]
    if smooth>0: result = filters.gaussian_filter(result,smooth,mode='mirror')
    return result

def get_errors(range=10000,smooth=0):
    result = error_log[-range:]
    if smooth>0: result = filters.gaussian_filter(result,smooth,mode='mirror')
    return result

lines_per_size = args.maxlines//len(sizes)


cerror_log = []
error_log = []
fonts = []


def load_fonts():
    global fonts
    if args.fonts is not None:
        fonts = []
        for pat in args.fonts.split(':'):
            if pat=="": continue
            fonts += sorted(glob.glob(pat))
    elif args.fontlist is not None:
        fonts = re.split(r'\s*\n\s*',open(args.fontlist).read().strip())
        fonts = ocrolib.glob_all(fonts)
    else:
        print "use -f or -F arguments to specify fonts"
        sys.exit(1)
    assert len(fonts)>0,"no fonts?"
    print "fonts",fonts



def process1():
    global fonts
    image = None
    gt = None
    font = None
    while True:
        font = pyrandom.choice(fonts)

        (sigma,ssigma,threshold,sthreshold) = pyrandom.choice(degradations)
        sigma += (2*rand()-1)*ssigma
        threshold += (2*rand()-1)*sthreshold
        line = pyrandom.choice(lines)
        size = pyrandom.choice(sizes)
        # with open(pagedir+".info","w") as stream:
        #     stream.write("%s\n"%font)
        try:
            # print font
            image = genline(text=line,fontfile=font,
                size=size,sigma=sigma,threshold=threshold)
            # image = numpy.ndarray([0])
        except:
            traceback.print_exc()
            continue
        if amin(image.shape)<10: continue
        if amax(image)<0.5: continue
        if args.distort>0:
            image = rdistort(image,args.distort,args.dsigma,cval=amax(image))
        # if args.display:
        #     gray()
        #     clf(); imshow(image); ginput(1,0.1)
        # fname = pagedir+"/01%04d"%lineno
        # imsave(fname+".bin.png",image)
        gt = ocrolib.normalize_text(line)

        if len(gt.strip()) < 5:
            continue
        
        # with codecs.open(fname+".gt.txt","w",'utf-8') as stream:
        #     stream.write(gt+"\n")
        print "sigma %5.2f thresh %5.2f size %3d\t text: %s"%(sigma,threshold,size,line)
        break

    return (preprocess(image), gt, font)



def safe_process1(queue):
    iterc = 0
    while True:
        iterc += 1
        if iterc % 800 == 0:
            load_fonts()

        try:
            queue.put(process1())
        except:
            traceback.print_exc()
            continue

# load_fonts()

from multiprocessing import Pool

pool = Pool(processes=2)
from multiprocessing import Process, Queue

q = Queue(maxsize=10)
p = Process(target=safe_process1, args=(q,))
p.start()

# print q.get()    # prints "[42, None, 'hello']"
# p.join()

from ocrolib import edist


for trial in range(args.start,args.ntrain):
    network.last_trial = trial+1
    
    if trial>args.start and trial%args.savefreq==0:
        network.save(args.output % trial)
    
    (image, gt, font) = q.get()
    try:
        # fname = inputs[trial%len(inputs)]
        # fname = inputs[randint(0,len(inputs))]
        # base,_ = ocrolib.allsplitext(fname)
        # line = ocrolib.read_image_gray(fname)
        # line = pil_to_gray(image)
        line = image
        # transcript = ocrolib.read_text(base+".gt.txt")
        transcript = gt

        print "#",trial,font,line.shape
        # line = preprocess(line)
        if line is None: continue
        cs = array(codec.encode(transcript),'i')
        outputs = array(network.forward(line))
        targets = array(lstm.make_target(cs,network.noutput()))
        aligned = array(lstm.ctc_align_targets(outputs,targets))
        deltas = aligned-outputs
        network.backward(deltas)
        result = lstm.translate_back(outputs)
        pred = "".join(codec.decode(result))
        acs = lstm.translate_back(aligned)
        gta = "".join(codec.decode(acs))
        print "   TRU:",transcript
        print "   ALN:",gta[:len(transcript)+5]
        print "   OUT:",pred[:len(transcript)+5]

        error = sum(deltas**2)
        error_log.append(error**.5/len(cs))

        cerror = edist.levenshtein(cs, result) 
        cerror_log.append((cerror,len(cs)))
        
        xr = [e*1.0/max(1,n) for e,n in cerror_log[-1000:]]
        sr = filters.gaussian_filter(xr,100,mode='mirror')
        print "    Levenshtein: ", sr[-1]

        if trial%20==0 or len(pred[:len(transcript)+5]) - len(transcript) > 15:
            # clf()
            # subplot(311)
            # title(cleandisp(transcript))
            # imshow(line.T,cmap=cm.gray,interpolation='bilinear')
            # subplot(312)
            # title(cleandisp(gta))
            # imshow(aligned.T,cmap=cm.hot,interpolation='bilinear',aspect='auto')
            # subplot(313)
            # title(cleandisp(pred))
            # imshow(outputs.T,cmap=cm.hot,interpolation='bilinear',aspect='auto')
            # tight_layout()
            # print "showing"
            if args.display:
                figure("training",figsize=(1400//75,800//75),dpi=75)
                clf()
                gcf().canvas.set_window_title(args.output)
                plot_network_info(network,outputs,aligned,deltas,transcript,pred,gta)
                ginput(1,0.01)
        # ginput(1,0.01)
    except e:
        print traceback.print_exc()
        continue
